- name: Mark a DWP Service as Unavailable (flatten + search)
  hosts: localhost
  gather_facts: false
  vars:
    dwp_base_url: "https://helixdemoash626-demo-dwp.onbmc.com/dwp/rest"
    username: "Liam"
    password: "Password_1234"
    target_service_name: "MicWilliStores"
    unavailable_annotation: "Marked unavailable by Ansible"

  tasks:
    - name: Login to DWP and store cookies
      ansible.builtin.uri:
        url: "{{ dwp_base_url }}/users/sessions/login"
        method: POST
        headers:
          X-Requested-By: "XMLHttpRequest"
          Content-Type: "application/json; charset=UTF-8"
        body_format: json
        body:
          loginId: "{{ username }}"
          password: "{{ password }}"
          appName: "dwp"
          apiVersion: 19020000
          locale: "en-US"
          deviceToken: "dummyToken"
          os: "Windows 10"
          model: "Web Client"
        return_content: yes
        status_code: 200
      register: login_response

    - name: Extract session cookies from login
      set_fact:
        session_cookies: >-
          {{ login_response.cookies
             | dict2items
             | map(attribute='key')
             | zip(login_response.cookies | dict2items | map(attribute='value'))
             | map('join', '=') | join('; ') }}

    - name: Retrieve all services (MYIT_ALL_SERVICES)
      ansible.builtin.uri:
        url: "{{ dwp_base_url }}/search"
        method: POST
        headers:
          X-Requested-By: "XMLHttpRequest"
          Content-Type: "application/json; charset=UTF-8"
          Cookie: "{{ session_cookies }}"
        body_format: json
        body:
          queryName: "MYIT_ALL_SERVICES"
          attributes:
            ServiceAvailability:
              - id
              - linkedServiceId
              - linkedServiceName
              - name
              - annotation
              - status
              - externalStatus
              - isEnabled
              - statusIsManual
        return_content: yes
        status_code: 200
      register: services_response

    - name: Flatten JSON content using to_paths
      set_fact:
        flat_services: "{{ lookup('ansible.utils.to_paths', services_response.json) }}"

    - name: Find the service ID by name
      set_fact:
        target_service_id: >-
          {{ flat_services
             | selectattr('value','equalto', target_service_name)
             | map(attribute='path')
             | map('regex_replace','\\.name$','\\.id')
             | map('extract', services_response.json)
             | first
          }}

    - name: Fail if target service not found
      fail:
        msg: "Service '{{ target_service_name }}' not found in retrieved services."
      when: target_service_id is not defined or target_service_id is none

    - name: Mark target service as unavailable
      ansible.builtin.uri:
        url: "{{ dwp_base_url }}/services/{{ target_service_id }}"
        method: PATCH
        headers:
          X-Requested-By: "XMLHttpRequest"
          Content-Type: "application/json; charset=UTF-8"
          Cookie: "{{ session_cookies }}"
        body_format: json
        body:
          annotation: "{{ unavailable_annotation }}"
          status: "Unavailable"
        return_content: yes
        status_code: 200
      register: mark_unavailable_response

    - name: Show response from marking service unavailable
      debug:
        msg: "{{ mark_unavailable_response.json }}"